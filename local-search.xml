<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Typora基本使用教程</title>
    <link href="/2024/04/21/Typora%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/21/Typora%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本文旨在帮助刚刚入门Typora的大家写博文👻。</p><span id="more"></span><p>​打开Typora后，看到一片空白一定有些蒙圈。不要害怕！学会文中的几个指令后就能丝滑写出像样的文章啦，其实Typora和word相差也没有太大。</p><h4 id="一、如何写Frontmatter？"><a href="#一、如何写Frontmatter？" class="headerlink" title="一、如何写Frontmatter？"></a>一、如何写Frontmatter？</h4><h5 id="1-何为frontmatter？"><a href="#1-何为frontmatter？" class="headerlink" title="1.何为frontmatter？"></a>1.何为frontmatter？</h5><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421141453727.png" alt="image-20240421141453727"></p><p>它定义了你的博文标题、这篇博文的分类、标签和作者名等。</p><p>对于我的博客来说，作者一般都是我自己，在主题配置文件修改过后就不用每次都写一遍了。除此之外，时间一般会默认为创建博文文档的时间，也可自行修改。</p><h5 id="2-写frontmatter的格式是什么？"><a href="#2-写frontmatter的格式是什么？" class="headerlink" title="2.写frontmatter的格式是什么？"></a>2.写frontmatter的格式是什么？</h5><p>若想在博文中插入frontmatter，需要打出三个短横线“—”，再Enter，可以看到</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142133810.png" alt="image-20240421142133810"></p><p>示例：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142500459.png" alt="image-20240421142500459"></p><p>注意：1.只有在博文最上方打frontmatter才会生效</p><p>​2.要使用英文冒号，冒号后需要有空格。</p><p>​3.若需要打多个标签，格式如下：<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142627174.png" alt="image-20240421142627174"></p><h5 id="3-常见的frontmatter"><a href="#3-常见的frontmatter" class="headerlink" title="3.常见的frontmatter"></a>3.常见的frontmatter</h5><p>title：标题</p><p>auther：作者</p><p>date：建立日期</p><p>updated：更新日期</p><p>comments：是否开启文章评论功能（默认值true）</p><p>tags：标签</p><p>categories：分类</p><p>permalink：覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</p><p>published：文章是否发布</p><h4 id="二、写文章常用指令"><a href="#二、写文章常用指令" class="headerlink" title="二、写文章常用指令"></a>二、写文章常用指令</h4><h5 id="1-多级标题"><a href="#1-多级标题" class="headerlink" title="1.多级标题"></a>1.多级标题</h5><p>在写文章时，往往需要用到多级标题。在Typora里，一级标题的字大小最大。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br></code></pre></td></tr></table></figure><p>依次类推。#后要加空格才会生效。</p><h5 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2.代码块"></a>2.代码块</h5><p>如果想要在文中加入可直接复制的代码块，只需要打出”&#96;&#96;&#96;“再Enter。</p><p>代码块右下方可以调整代码语言。</p><h5 id="3-emjoy"><a href="#3-emjoy" class="headerlink" title="3.emjoy"></a>3.emjoy</h5><p>很多好看的emjoy都在这个网页：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp; more (webfx.com)</a></p><p>下滑找到喜欢的emjoy点击就能够复制了哦😋。</p><h5 id="4-加粗字体-斜体等"><a href="#4-加粗字体-斜体等" class="headerlink" title="4.加粗字体&#x2F;斜体等"></a>4.加粗字体&#x2F;斜体等</h5><p>只要鼠标圈出想要修改的文本，右键就可以修改啦。</p>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github图床配置教程</title>
    <link href="/2024/04/15/Typora%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/15/Typora%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本文详细地描述了如何利用Typora+PicGo+Github建立图床，并且列出了很多新手容易踩的坑（自己淋过雨要为大家撑伞）。如果对于某些步骤有疑惑或者出错了可以留下评论。</p><span id="more"></span><h3 id="一、建立Github仓库"><a href="#一、建立Github仓库" class="headerlink" title="一、建立Github仓库"></a>一、建立Github仓库</h3><h5 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h5><p>先登录进自己的Github账号，按图示依次点击，就能新建一个仓库了。</p><p>（1）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415201356717.png" alt="image-20240415201356717"></p><p>（2）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415201449418.png" alt="image-20240415201449418"></p><p>（3）填写仓库名，设置为公开，记得要勾选添加README文件，这样才能在仓库中直接创建一个默认的main分支。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415202107013.png" alt="image-20240415202107013"></p><h5 id="2-生成一个token，用于PicGo访问Github"><a href="#2-生成一个token，用于PicGo访问Github" class="headerlink" title="2.生成一个token，用于PicGo访问Github"></a>2.生成一个token，用于PicGo访问Github</h5><p>（1）依次进入settings&#x2F;Developer settings&#x2F;Personal access tokens</p><p>（反正作者的Github上真的找不到这样一个路径，所以以上工作做好后，可以直接访问如下网站进入这个界面，亲测无误。网址：<a href="https://github.com/settings/tokens">Personal Access Tokens (Classic) (github.com)</a>）</p><p>（2）（据说选上面的Beta选项会变得不幸，虽然作者第一次失败时也是选了上面的Beta选项，但是由于还存在其他漏洞，所以它究竟可不可用不得而知）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415203006752.png" alt="image-20240415203006752"></p><p>（3）Note随便写就行，时间限度我选了永久，因为害怕token失效；</p><p>下面的其他选项都不用管，只要将repo勾选上就好。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415203417667.png" alt="image-20240415203417667"></p><p>（4）得到token后好好保存（它只会在这里显示一次），等会还需要用上。</p><p>tips：如果因为某些步骤失误，需要重新生成token，记得把先前生成的token删掉。</p><h3 id="二、PicGo配置"><a href="#二、PicGo配置" class="headerlink" title="二、PicGo配置"></a>二、PicGo配置</h3><h5 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1.下载PicGo"></a>1.下载PicGo</h5><p>（1）点击链接，直达：<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1">Release 2.3.1 · Molunerfinn&#x2F;PicGo (github.com)</a></p><p>（2）我所给出的链接是2.3.1正式版，如果需要最新版，可以点击releases，如图<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415204546713.png" alt="image-20240415204546713"></p><p>（3）在2.3.1这个版本界面一直下滑，直到如图，点击Assets会出现以下版本，可根据需求下载。比如我的设备是Windows11，我下载的版本已在图中圈出。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415204936447.png" alt="image-20240415204936447"></p><p>（4）下载后进行安装，步骤比较简单就省略了。记住安装时的路径，后面会需要。</p><p>（5）然后！是作者踩得一个大坑。在安装后，我怎么都无法打开这个软件。一开始我以为是版本不兼容等问题，但是设置之后仍旧无法打开。但是任务管理器上它明明就在运行……我还卸载重新安装了很多次。后来才发现，点开如图的地方，才发现它在偷偷运行呢！不知道为什么它运行时居然不显示界面，需要点一下才会显示。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415205718027.png" alt="image-20240415205718027"></p><h5 id="2-PicGo配置"><a href="#2-PicGo配置" class="headerlink" title="2.PicGo配置"></a>2.PicGo配置</h5><p>（1）进入PicGo后，将框住的地方修改为Github</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415205845506.png" alt="image-20240415205845506"></p><p>（7）点击图床设置，选择Github设置，进入如下界面。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415210205262.png" alt="image-20240415210205262"></p><p>仓库名格式：“Github用户名&#x2F;仓库名”</p><p>分支名：main（不要用master）</p><p>token：在第一步保存的token直接粘贴进来</p><p>存储路径：可设可不设</p><p>自定义域名格式：<a href="https://cdn.jsdelivr.net/gh/[Github%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]@main">https://cdn.jsdelivr.net/gh/[Github用户名]/[仓库名]@main</a></p><p>（这个域名据说可以加快访问图片的速度，不知道日后会不会失效，但是暂时是可以用的）</p><p>点击确定，PicGo就配置好啦。</p><p>（8）补充：点击PicGo设置中的设置sever，如果下图处不是36677要修改为36677，否则会出错</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415210909195.png" alt="image-20240415210909195"></p><h3 id="三、Typora配置"><a href="#三、Typora配置" class="headerlink" title="三、Typora配置"></a>三、Typora配置</h3><p>（1）点击右上角文件，进入偏好设置</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211109267.png" alt="image-20240415211109267"></p><p>（2）进入图像设置，插入图片时选择上传图片，并将如图所示的选项打勾；</p><p>上传服务设定设置为PicGo（app），下面填写PicGo安装的路径，一定要填写完整，把PicGo.exe也要放到路径里。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211453817.png" alt="image-20240415211453817"></p><p>（3）至此所有的配置已经完成。</p><p>确保网络已经连接好，点击上图左下角的验证图片上传选项，若出现如下图的界面，证明上传成功，PicGo应用也会发来通知说上传成功。此时在自己的Github仓库里也能够找到相应图片。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211851779.png" alt="image-20240415211851779"></p><p>如果仍然不成功也不要气馁呀。作者配置了快一天才成功…………因为先配置了Gitee结果发现它失效了（失效了还不删教程，太过分了！！！！）</p><p>如果配置成功啦就恭喜你啦，从此以后就可以丝滑地在Typora里粘贴图片了~</p>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>Github</tag>
      
      <tag>PicGo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【踩雷合辑】利用Hexo搭建以fluid为主题的Github博客需要注意什么？</title>
    <link href="/2024/04/13/github%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/13/github%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>​搭建博客是一个非常漫长的过程，在期间我参照过几十篇教程，在非常厉害的Gina同学的帮助下，反反复复试验了很多很多次，经过很多天后才终于能通过我的博客网址访问我的博客主页啦。<span id="more"></span>中间踩过不少雷，有时候一度绝望过（因为在网上根本搜不到和我一样的错误QAQ），好在最终坚持下来了。</p><p>​先附上fluid主题的官方文档：<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: :ocean: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant Material-Design theme for Hexo (github.com)</a>里面有很详细的配置教程哦。</p><h4 id="一、-config-yml配置文件撰写"><a href="#一、-config-yml配置文件撰写" class="headerlink" title="一、_config.yml配置文件撰写"></a>一、_config.yml配置文件撰写</h4><p>​它就在你所搭建的博客文档的根目录里，是非常重要的配置文档。</p><h5 id="1-博客主题修改"><a href="#1-博客主题修改" class="headerlink" title="1.博客主题修改"></a>1.博客主题修改</h5><p>​打开文档后拉到下面，找到<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240416163624718.png" alt="image-20240416163624718"></p><p>​将theme后改为fluid，注意fluid主题的文件要放入themes文件夹里。如果是下载了zip压缩包，需要将其解压到该文件夹里并修改名字为fluid。</p><h5 id="2-deploy配置"><a href="#2-deploy配置" class="headerlink" title="2.deploy配置"></a>2.deploy配置</h5><p>​这个代码块就在主题配置的下方。注意不要按照网上搜索的教程配置，因为很多教程都已经很老了，所以可能会出问题。按照下面的格式配置是没有问题的。（分支必须是main）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># <span class="hljs-title class_">Deployment</span><br>## <span class="hljs-title class_">Docs</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy</span>:<br>  <span class="hljs-attr">type</span>: git<br>  <span class="hljs-attr">repo</span>: git@github.<span class="hljs-property">com</span>:[博客名]/[仓库名].<span class="hljs-property">github</span>.<span class="hljs-property">io</span>.<span class="hljs-property">git</span><br>  <span class="hljs-attr">branch</span>: main<br></code></pre></td></tr></table></figure><p>注意：每个冒号后都有一个空格。</p><h5 id="3-记得保存修改"><a href="#3-记得保存修改" class="headerlink" title="3.记得保存修改"></a>3.记得保存修改</h5><p>​我所用的编译软件是vscode，这个软件直接退出是不会保存的。快捷键Ctrl+s可以保存修改，然后不用退出就可以继续hexo g+hexo s两步走试看网页效果啦。</p><h4 id="二、博客部署的问题"><a href="#二、博客部署的问题" class="headerlink" title="二、博客部署的问题"></a>二、博客部署的问题</h4><p>​我们知道要搭建博客，就要去Github官网创建一个博客，然后再建立一个仓库用于保存我们的网页。博客的名字可以随意取，但是仓库名，如果你和我一样取的是英文名，<strong>第一个字母一定要小写！！！！！</strong></p><p>​因为我们会发现，当我们想要进入自己的博客官网时，输入的网址格式如下：https:&#x2F;&#x2F;[仓库名].github.io&#x2F;，而每次进入网址时，仓库名的第一个字母就会自动从大写变成小写，因此访问时就会显示404。</p><p>​不知道是主题的问题还是什么，反正这个问题害我找bug找了快两个小时……</p><h5 id="1-配置安装缺失"><a href="#1-配置安装缺失" class="headerlink" title="1.配置安装缺失"></a>1.配置安装缺失</h5><p>有时候hexo d后报错是因为有些配置没有安装,用下面的指令安装好就可</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h5 id="2-在根目录下部署"><a href="#2-在根目录下部署" class="headerlink" title="2.在根目录下部署"></a>2.在根目录下部署</h5><p>有时候搭建博客在部署时会忘记退出到根目录，此时也会出错。</p><h4 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h4><p>1.在部署博客时最好hexo clean后再hexo g+hexo d。</p><p>2.千万不要轻易使用git init这个指令！使用后我的图片全部没有了……其他问题倒没有发现。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Github -fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/12/hello-world/"/>
    <url>/2024/04/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
