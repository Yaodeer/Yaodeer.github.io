<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>KMP算法详解+图示（附优化版）</title>
    <link href="/2024/04/25/KMP%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3+%E5%9B%BE%E7%A4%BA%EF%BC%88%E9%99%84%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89/"/>
    <url>/2024/04/25/KMP%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3+%E5%9B%BE%E7%A4%BA%EF%BC%88%E9%99%84%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="一、KMP算法的意义"><a href="#一、KMP算法的意义" class="headerlink" title="一、KMP算法的意义"></a>一、KMP算法的意义</h3><p>​在求解这样的算法问题时：已知两个字符串s1和s2，其中s2是s1的字串，请找到s2在s1中的位置。传统的寻找方法即暴力解法：分别从两个字串的第一个字符开始找起，若可以匹配就继续下一个字符；若匹配失败，s1回溯到第二个字符，s2回溯到第一个字符，依此类推……</p><p>​暴力解法在字串长度过大时往往时间复杂度很高，而其主要原因是因为回溯的次数太多，而KMP算法的作用就是用已知的信息量去尽可能减少回溯次数，达到简洁且迅速的效果。</p><h3 id="二、KMP算法的步骤"><a href="#二、KMP算法的步骤" class="headerlink" title="二、KMP算法的步骤"></a>二、KMP算法的步骤</h3><h4 id="1-计算字符串中每个位置之前字串的最长相等前后缀长度"><a href="#1-计算字符串中每个位置之前字串的最长相等前后缀长度" class="headerlink" title="1.计算字符串中每个位置之前字串的最长相等前后缀长度"></a>1.计算字符串中每个位置之前字串的最长相等前后缀长度</h4><p>（1）最长相等前后缀的概念</p><p>​已知一个字符串abaaba,它的前缀字串和后缀字串分别为：</p><p>前缀：a,ab,<strong>aba</strong>,abaa,abaab;</p><p>后缀：a,ba,<strong>aba</strong>,aaba,baaba;</p><p>​那么很明显，aba是它的最长相等前后缀，即这个字符串的最长相等前后缀长度为3。</p><p>（2）next[n]数组</p><p>​对于字符串abaabac，我们想要用数组next[n]中的元素next[i]来保存字符串第i个字符前的字串的最长相等前后缀的长度。</p><p>​首先，我们规定next[0]&#x3D;-1（前面没有字串），next[1]&#x3D;0(字串没有前后缀)。那么就可以得到next[n]的值：</p><p>​ abaabac</p><p>next[0]  [1] [2]      [3]     [4]      [5]     [6]</p><p>​    -1    0    0    1    1    2        3</p><h4 id="2-根据next数组，对字串进行匹配"><a href="#2-根据next数组，对字串进行匹配" class="headerlink" title="2.根据next数组，对字串进行匹配"></a>2.根据next数组，对字串进行匹配</h4><p>​创建如下图所示的两个字符串。</p><p>​已知在进行前六个字符的匹配时，由于都能够匹配成功，因此箭头同步向右移动。当匹配到如图所示的位置时，匹配失败了。如果按照暴力解法，那么上面的字符串应该从第一个b开始匹配，而子串需要从头匹配。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425170716134.png" alt="image-20240425170716134"></p><p>​而KMP算法则利用上一步我们求解的next数组，已知子串中字符<strong>c</strong>的位置是6，而<strong>next[6]&#x3D;3</strong>。因此下一次匹配时，我们直接移动子串，使得子串位置为<strong>3</strong>的字符<strong>a</strong>对准箭头所在的地方，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425171406127.png" alt="image-20240425171406127"></p><p>​接下来让我们理解一下这一步的原理是什么。我会讲解地通俗一点（可能我的理解比较浅显，但是这个思路是可以弄清楚这个算法的）。</p><p>​我们知道KMP算法的作用是要减少回溯的次数，那么如何减少呢？当我们已经走到图一的位置时，我们很容易发现按照暴力方法很浪费时间，因为很明显直接按图二移动是最方便快捷的。由于字符串的匹配不可能每次都让我们用眼睛看到，因此我们需要将信息存储在数组里，需要的时候就可以使用。而next数组就是存储这个重要信息的数组。比如在图一的位置，next数组可以告诉程序，在已知匹配的字符串中，前三位字符和后三位字符是相等的。而此时只有最后一位是不匹配的，因此，我们只需要把前三位平移过来，那么就可以得到图二的结果：有三位字符是匹配的，然后我们继续判断下一位是否和p匹配。既然最大相等前后缀字符串的长度为3，那么对应的，箭头就应该指向子串位置为3的字符（从0计）。</p><p>​以此类推，由于next[3]&#x3D;1,那么相应的，箭头应该指向第二个字符b。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425172526743.png" alt="image-20240425172526743"></p><p>​接下来，聪明的你应该知道，箭头应该指向a了。可是这时候仍然是不匹配的，而且next[0]&#x3D;-1，这时候应该怎么办呢？很简单，这时候应该将字符串的箭头向右移动了，而子串的箭头位置不变，因为它已经指向字串的第0个字符了。</p><h3 id="三、KMP算法的代码实现"><a href="#三、KMP算法的代码实现" class="headerlink" title="三、KMP算法的代码实现"></a>三、KMP算法的代码实现</h3><h4 id="1-计算next数组"><a href="#1-计算next数组" class="headerlink" title="1.计算next数组"></a>1.计算next数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getnext</span><span class="hljs-params">(string s,<span class="hljs-type">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br>    next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>||s[i]==s[k])&#123;<br>            i++,k++;<br>            next[i]=k;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            k=next[k];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​这个函数真的很不好理解。如果让我直接去想这个代码我是肯定想不到的，因此只能就着代码理清思路，这样做题的时候不至于忘记。</p><p>​首先，由于k的初始值是-1，所以一定会进入if函数里，这样一来，next[1]就被赋为0了。</p><p>​当k&#x3D;-1或者s[i]&#x3D;s[k]的时候，会将i和k同时右移。我们先分析，什么时候k&#x3D;-1呢？只有上一次循环时k&#x3D;0，并且s[0]!&#x3D;s[i]时，在k&#x3D;next[k]这个公式里，才会将k又赋为-1。故而此时，i+1前并无相等前后缀，也就又将next[i+1]赋为0。接着，又会判断s[i+1]与s[0]是否相等，如果相等，则i+2前最大相等前后缀长度就为1了。</p><p>​若前面已经有相等前后缀，此时s[i]&#x3D;s[k]，那么相当于相等前后缀的延长，因此s和k会同时后移观察下一位是否也相等。</p><p>​比较复杂的情况如下图（理解k&#x3D;next[k]）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425211350229.png" alt="image-20240425211350229"></p><p>​如图是一串字符串，下标i和next[i]的值分别在其上下标出。在i&#x3D;6，k&#x3D;3之前，可以发现最大前后缀是3，而此时s[i]&#x3D;s[k]不相等。而这个函数的关键之处：k&#x3D;next[k]，将k的值改变成了1（next[3]&#x3D;1)。我们可以发现，如果将k和i分别向前移一位，此时k&#x3D;0，i&#x3D;5，而s[i]的值刚好等于s[k]。这并不是巧合。因为i&#x3D;6之前最大前后缀长度为3，也就是说明字符串前三位和i&#x3D;6之前的三位是相等的。而下标i&#x3D;3之前的最大前后缀长度为1，也就是说明i&#x3D;0、i&#x3D;2、i&#x3D;3、i&#x3D;5这几个数的值也是相等的。所以现在我们向前回溯到，与i&#x3D;6不相等的那个下标（此处为3）之前的子串中的相等前后缀，它的长度对应的下标前的子串一定和i&#x3D;6前的某个后缀相等。然后我们继续比较该下标的值和i&#x3D;6处的值是否相等，以此类推。</p><p>​如果还是不太明白可以多试几个字符串多多验证几次，推导几遍，就会渐渐思路清晰。（其实我们会发现这个思想和前面讲到的KMP思想很类似）</p><p>​ps:while函数中之所以i&lt;s.size()-1，是因为每次都是先i++再赋值的。</p><h4 id="2-KMP算法的代码"><a href="#2-KMP算法的代码" class="headerlink" title="2.KMP算法的代码"></a>2.KMP算法的代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">KMPinit</span><span class="hljs-params">(string s,string p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> len=p.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> next[len],i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化</span><br>    <span class="hljs-built_in">getnext</span>(p,next);<span class="hljs-comment">//求出next数组</span><br>    <span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;j&lt;len)&#123;<span class="hljs-comment">//跳出循环要么找完s字符串都没找到，要么已经找完了</span><br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span>||s[i]==s[j])&#123;<span class="hljs-comment">//根据图示理解</span><br>            i++,j++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            j=next[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j&gt;=len)&#123;<span class="hljs-comment">//如果跳出循环是因为已经匹配完毕，那么就可以返回位置了</span><br>        <span class="hljs-type">int</span> index=i-len;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//找不到匹配项</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、KMP代码的优化"><a href="#四、KMP代码的优化" class="headerlink" title="四、KMP代码的优化"></a>四、KMP代码的优化</h3><p>​假设子串为aaaaaab，并且字符串为aaaaaacccc。我们会发现b与c不匹配，接着便是前一位的a与c进行匹配，但是依旧不匹配，而紧接着会将前面的a依次与c匹配，得到的结果仍旧是不匹配，因此当next数组指向的字符和它本身相等时，便没有必要再匹配下去。</p><p>​所以我们可以把next函数做以下修正(KMP函数无需改变)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getnext</span><span class="hljs-params">(string s,<span class="hljs-type">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br>    next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>||s[i]==s[k])&#123;<br>            i++,k++;<br>            <span class="hljs-keyword">if</span>(s[i]!=s[k])<br>            next[i]=k;<br>            <span class="hljs-keyword">else</span><br>                next[i]=next[k];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            k=next[k];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考博客：CSDN（哈顿之光）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>KMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为博客配置waline评论模块需要注意什么</title>
    <link href="/2024/04/22/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEwaline%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88/"/>
    <url>/2024/04/22/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEwaline%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>​想要在Github博客中部署一个评论模块有许多选择，其中waline是在valine的基础上衍化而来，因此功能也会更多。但是在跟着官方文档配置的时候需要注意一些问题，否则会一直出错😿……（如果你因fail to fetch这个错误而来，那真是找对人了）</p><span id="more"></span><p>​先附上官方教程文档：<a href="https://waline.js.org/guide/get-started/#vercel-%E9%83%A8%E7%BD%B2-%E6%9C%8D%E5%8A%A1%E7%AB%AF">快速上手 | Waline</a></p><p>​首先要注意的是在注册LeanCloud账号时最好注册国际版，这样比较方便。</p><h3 id="一、vercel部署部分"><a href="#一、vercel部署部分" class="headerlink" title="一、vercel部署部分"></a>一、vercel部署部分</h3><h5 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422144225513.png" alt="image-20240422144225513"></p><p>如上图所示，首先需要点击Deploy然后进行登录，登陆完成之后，会显示这个界面：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422144718930.png" alt="image-20240422144718930"></p><p>这时我一脸蒙，于是就真的随便找了一个项目creat了（页面和教程不一样但我并未在意）……</p><p>其实应该退回到教程页，再点一遍deploy，就可以和教程一致了。</p><h5 id="2-环境变量配置"><a href="#2-环境变量配置" class="headerlink" title="2.环境变量配置"></a>2.环境变量配置</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422145045708.png" alt="image-20240422145045708"></p><p>​第一次看这段话的时候我有点疑惑，加上这时候设置的界面和教程有细微差别，所以我的配置也出错了。如下图所示，正确的配置应该是KEY栏分别写入LEAN_ID<code>, </code>LEAN_KEY和LEAN_MASTER_KEY，Value栏分别写入它们三个的值。（需要add more新创建两个栏）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422145236754.png" alt="image-20240422145236754"></p><h5 id="3-获取服务端地址"><a href="#3-获取服务端地址" class="headerlink" title="3.获取服务端地址"></a>3.获取服务端地址</h5><p>​教程中写到，部署结束后点击visit后跳转到的网页的网址即是服务器地址，也就是后面的serverURL，在HTML文件部署的时候也需要用到。</p><p>​重点来了！！！！在我把所有东西全部部署结束，且保证绝对无误的情况下，虽然我的博客网页上已经展现出了评论的模块，我居然还是评论不了（会显示fail to fetch）……（此时心态已崩🤯）我反反复复找了很久的错误，翻看了视频教程下的评论，终于发现了和我一样错误的友友。他说原因是“<strong>完成后访问的visit地址和第二次在ver项目中打开的server地址不一样</strong>”。我反复琢磨了很久，因为我反复点开visit，这个网址一直不变啊。。。突然，一切都变了，某个瞬间当我点开visit时，它居然显示网页停止访问😨。我三分疑惑四分愤怒地又点开了很多次，终于它加载出来了，定睛一看网页的域名居然变了😇😇😇😇😇😇😇</p><p>​当我把变化后的域名代替先前的域名后，错误就解决了！</p><h3 id="二、HTML引入"><a href="#二、HTML引入" class="headerlink" title="二、HTML引入"></a>二、HTML引入</h3><h5 id="1-找到index-html"><a href="#1-找到index-html" class="headerlink" title="1.找到index.html"></a>1.找到index.html</h5><p>​（ps：不知道不同主题是否对这个配置文件名有影响，我所用的是fluid这个主题）</p><p>​这里我又犯错了，因为我发现.deploy_git和public文件夹下都有一个这样的文件。由于先前我知道了每次hexo clean后都会删掉public文件夹，因此我毅然决然地选择修改了.deploy_git里的文件。于是每次部署网页之后，我都惊奇地发现回到这个文件后我做的修改都离奇消失了。直到我在hexo d时仔细地看了一眼运行结果，发现它赫然写着delete  .deploy_git以及保留public，我的小脑都萎缩了🫠。</p><p>​因此结论就是，一定要<strong>修改public文件夹下的index.html文件</strong>，这样才能生效。</p><h5 id="2-如何修改"><a href="#2-如何修改" class="headerlink" title="2.如何修改"></a>2.如何修改</h5><p>​注意在修改的时候不要把教程文档的所有代码全部粘贴进html文件。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422151514648.png" alt="image-20240422151514648"></p><p>​第一部分：head部分，只将中间的那一部分添加入自己html文件的head部分里。记得缩进一定要规范。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422151659178.png" alt="image-20240422151659178"></p><p>​第二部分：body部分。我们在html文件中找到<body>后点开方便的符号就可以折叠，这样就可以找到body部分的末尾在哪里<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422151922923.png" alt="image-20240422151922923"></p><p>而第二部分最好添加进body部分的最后面。由于我的文件里写道要把某部分保留在最后，因此这一部分代码我就放在那部分前面了。仍然要注意缩进的格式！但是因为我的文件中，body内的很多代码都没有缩进，因此这一部分代码我也没有缩进一格。</p><h3 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h3><h5 id="1-部署博客主题配置文件"><a href="#1-部署博客主题配置文件" class="headerlink" title="1.部署博客主题配置文件"></a>1.部署博客主题配置文件</h5><p>​在我配置评论功能的时候，不仅部署了html文件，还部署了yml文件。具体的部署要视各主题而定。因为主题部署文件可能并未默认开启评论功能，因此要去文件中找到“comment”部分，打开评论功能，并配置其他相应必要代码。</p><h5 id="2-重新创建项目"><a href="#2-重新创建项目" class="headerlink" title="2.重新创建项目"></a>2.重新创建项目</h5><p>​如果在第一次配置时出错了，想要再次配置，一定要先删掉之前的项目，删除方法如下图所示，点开Geberal下滑到最下面就可以删掉了。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422152645310.png" alt="image-20240422152645310"></p><p>​但是仅仅在这里删掉是没有用的。还需要进入自己的GitHub网站，你会发现那里也创建了一个同名项目，需要将它也删除。</p><p>​（这个错误也硬控我半小时😾）</p><p>​如果跟着教程文档配置结束后，也排除了我的文章里的问题，还是没有成功，可以在这里或教程下留下评论，让大家一起找找。听说有官方QQ群，但是不知道是哪个😴</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>waline</tag>
      
      <tag>comments</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora基本使用教程</title>
    <link href="/2024/04/21/Typora%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/21/Typora%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本文旨在帮助刚刚入门Typora的大家写博文👻。</p><span id="more"></span><p>​打开Typora后，看到一片空白一定有些蒙圈。不要害怕！学会文中的几个指令后就能丝滑写出像样的文章啦，其实Typora和word相差也没有太大。</p><h4 id="一、如何写Frontmatter？"><a href="#一、如何写Frontmatter？" class="headerlink" title="一、如何写Frontmatter？"></a>一、如何写Frontmatter？</h4><h5 id="1-何为frontmatter？"><a href="#1-何为frontmatter？" class="headerlink" title="1.何为frontmatter？"></a>1.何为frontmatter？</h5><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421141453727.png" alt="image-20240421141453727"></p><p>它定义了你的博文标题、这篇博文的分类、标签和作者名等。</p><p>对于我的博客来说，作者一般都是我自己，在主题配置文件修改过后就不用每次都写一遍了。除此之外，时间一般会默认为创建博文文档的时间，也可自行修改。</p><h5 id="2-写frontmatter的格式是什么？"><a href="#2-写frontmatter的格式是什么？" class="headerlink" title="2.写frontmatter的格式是什么？"></a>2.写frontmatter的格式是什么？</h5><p>若想在博文中插入frontmatter，需要打出三个短横线“—”，再Enter，可以看到</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142133810.png" alt="image-20240421142133810"></p><p>示例：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142500459.png" alt="image-20240421142500459"></p><p>注意：1.只有在博文最上方打frontmatter才会生效</p><p>​2.要使用英文冒号，冒号后需要有空格。</p><p>​3.若需要打多个标签，格式如下：<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142627174.png" alt="image-20240421142627174"></p><h5 id="3-常见的frontmatter"><a href="#3-常见的frontmatter" class="headerlink" title="3.常见的frontmatter"></a>3.常见的frontmatter</h5><p>title：标题</p><p>auther：作者</p><p>date：建立日期</p><p>updated：更新日期</p><p>comments：是否开启文章评论功能（默认值true）</p><p>tags：标签</p><p>categories：分类</p><p>permalink：覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</p><p>published：文章是否发布</p><h4 id="二、写文章常用指令"><a href="#二、写文章常用指令" class="headerlink" title="二、写文章常用指令"></a>二、写文章常用指令</h4><h5 id="1-多级标题"><a href="#1-多级标题" class="headerlink" title="1.多级标题"></a>1.多级标题</h5><p>在写文章时，往往需要用到多级标题。在Typora里，一级标题的字大小最大。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br></code></pre></td></tr></table></figure><p>依次类推。#后要加空格才会生效。</p><h5 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2.代码块"></a>2.代码块</h5><p>如果想要在文中加入可直接复制的代码块，只需要打出”&#96;&#96;&#96;“再Enter。</p><p>代码块右下方可以调整代码语言。</p><h5 id="3-emjoy"><a href="#3-emjoy" class="headerlink" title="3.emjoy"></a>3.emjoy</h5><p>很多好看的emjoy都在这个网页：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp; more (webfx.com)</a></p><p>下滑找到喜欢的emjoy点击就能够复制了哦😋。</p><h5 id="4-加粗字体-斜体等"><a href="#4-加粗字体-斜体等" class="headerlink" title="4.加粗字体&#x2F;斜体等"></a>4.加粗字体&#x2F;斜体等</h5><p>只要鼠标圈出想要修改的文本，右键就可以修改啦。</p>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github图床配置教程</title>
    <link href="/2024/04/15/Typora%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/15/Typora%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本文详细地描述了如何利用Typora+PicGo+Github建立图床，并且列出了很多新手容易踩的坑（自己淋过雨要为大家撑伞）。如果对于某些步骤有疑惑或者出错了可以留下评论。</p><span id="more"></span><h3 id="一、建立Github仓库"><a href="#一、建立Github仓库" class="headerlink" title="一、建立Github仓库"></a>一、建立Github仓库</h3><h5 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h5><p>先登录进自己的Github账号，按图示依次点击，就能新建一个仓库了。</p><p>（1）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415201356717.png" alt="image-20240415201356717"></p><p>（2）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415201449418.png" alt="image-20240415201449418"></p><p>（3）填写仓库名，设置为公开，记得要勾选添加README文件，这样才能在仓库中直接创建一个默认的main分支。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415202107013.png" alt="image-20240415202107013"></p><h5 id="2-生成一个token，用于PicGo访问Github"><a href="#2-生成一个token，用于PicGo访问Github" class="headerlink" title="2.生成一个token，用于PicGo访问Github"></a>2.生成一个token，用于PicGo访问Github</h5><p>（1）依次进入settings&#x2F;Developer settings&#x2F;Personal access tokens</p><p>（反正作者的Github上真的找不到这样一个路径，所以以上工作做好后，可以直接访问如下网站进入这个界面，亲测无误。网址：<a href="https://github.com/settings/tokens">Personal Access Tokens (Classic) (github.com)</a>）</p><p>（2）（据说选上面的Beta选项会变得不幸，虽然作者第一次失败时也是选了上面的Beta选项，但是由于还存在其他漏洞，所以它究竟可不可用不得而知）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415203006752.png" alt="image-20240415203006752"></p><p>（3）Note随便写就行，时间限度我选了永久，因为害怕token失效；</p><p>下面的其他选项都不用管，只要将repo勾选上就好。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415203417667.png" alt="image-20240415203417667"></p><p>（4）得到token后好好保存（它只会在这里显示一次），等会还需要用上。</p><p>tips：如果因为某些步骤失误，需要重新生成token，记得把先前生成的token删掉。</p><h3 id="二、PicGo配置"><a href="#二、PicGo配置" class="headerlink" title="二、PicGo配置"></a>二、PicGo配置</h3><h5 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1.下载PicGo"></a>1.下载PicGo</h5><p>（1）点击链接，直达：<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1">Release 2.3.1 · Molunerfinn&#x2F;PicGo (github.com)</a></p><p>（2）我所给出的链接是2.3.1正式版，如果需要最新版，可以点击releases，如图<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415204546713.png" alt="image-20240415204546713"></p><p>（3）在2.3.1这个版本界面一直下滑，直到如图，点击Assets会出现以下版本，可根据需求下载。比如我的设备是Windows11，我下载的版本已在图中圈出。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415204936447.png" alt="image-20240415204936447"></p><p>（4）下载后进行安装，步骤比较简单就省略了。记住安装时的路径，后面会需要。</p><p>（5）然后！是作者踩得一个大坑。在安装后，我怎么都无法打开这个软件。一开始我以为是版本不兼容等问题，但是设置之后仍旧无法打开。但是任务管理器上它明明就在运行……我还卸载重新安装了很多次。后来才发现，点开如图的地方，才发现它在偷偷运行呢！不知道为什么它运行时居然不显示界面，需要点一下才会显示。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415205718027.png" alt="image-20240415205718027"></p><h5 id="2-PicGo配置"><a href="#2-PicGo配置" class="headerlink" title="2.PicGo配置"></a>2.PicGo配置</h5><p>（1）进入PicGo后，将框住的地方修改为Github</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415205845506.png" alt="image-20240415205845506"></p><p>（2）点击图床设置，选择Github设置，进入如下界面。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415210205262.png" alt="image-20240415210205262"></p><p>仓库名格式：“Github用户名&#x2F;仓库名”</p><p>分支名：main（不要用master）</p><p>token：在第一步保存的token直接粘贴进来</p><p>存储路径：可设可不设</p><p>自定义域名格式：<a href="https://cdn.jsdelivr.net/gh/[Github%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]@main">https://cdn.jsdelivr.net/gh/[Github用户名]/[仓库名]@main</a></p><p>（这个域名据说可以加快访问图片的速度，不知道日后会不会失效，但是暂时是可以用的）</p><p>点击确定，PicGo就配置好啦。</p><p>（3）补充：点击PicGo设置中的设置sever，如果下图处不是36677要修改为36677，否则会出错</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415210909195.png" alt="image-20240415210909195"></p><h3 id="三、Typora配置"><a href="#三、Typora配置" class="headerlink" title="三、Typora配置"></a>三、Typora配置</h3><p>（1）点击右上角文件，进入偏好设置</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211109267.png" alt="image-20240415211109267"></p><p>（2）进入图像设置，插入图片时选择上传图片，并将如图所示的选项打勾；</p><p>上传服务设定设置为PicGo（app），下面填写PicGo安装的路径，一定要填写完整，把PicGo.exe也要放到路径里。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211453817.png" alt="image-20240415211453817"></p><p>（3）至此所有的配置已经完成。</p><p>确保网络已经连接好，点击上图左下角的验证图片上传选项，若出现如下图的界面，证明上传成功，PicGo应用也会发来通知说上传成功。此时在自己的Github仓库里也能够找到相应图片。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211851779.png" alt="image-20240415211851779"></p><p>如果仍然不成功也不要气馁呀。作者配置了快一天才成功…………因为先配置了Gitee结果发现它失效了（失效了还不删教程，太过分了！！！！）</p><p>如果配置成功啦就恭喜你啦，从此以后就可以丝滑地在Typora里粘贴图片了~</p>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>Github</tag>
      
      <tag>PicGo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【踩雷合辑】利用Hexo搭建以fluid为主题的Github博客需要注意什么？</title>
    <link href="/2024/04/13/github%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/13/github%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>​搭建博客是一个非常漫长的过程，在期间我参照过几十篇教程，在非常厉害的Gina同学的帮助下，反反复复试验了很多很多次，经过很多天后才终于能通过我的博客网址访问我的博客主页啦。<span id="more"></span>中间踩过不少雷，有时候一度绝望过（因为在网上根本搜不到和我一样的错误QAQ），好在最终坚持下来了。</p><p>​先附上fluid主题的官方文档：<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: :ocean: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant Material-Design theme for Hexo (github.com)</a>里面有很详细的配置教程哦。</p><h4 id="一、-config-yml配置文件撰写"><a href="#一、-config-yml配置文件撰写" class="headerlink" title="一、_config.yml配置文件撰写"></a>一、_config.yml配置文件撰写</h4><p>​它就在你所搭建的博客文档的根目录里，是非常重要的配置文档。</p><h5 id="1-博客主题修改"><a href="#1-博客主题修改" class="headerlink" title="1.博客主题修改"></a>1.博客主题修改</h5><p>​打开文档后拉到下面，找到<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240416163624718.png" alt="image-20240416163624718"></p><p>​将theme后改为fluid，注意fluid主题的文件要放入themes文件夹里。如果是下载了zip压缩包，需要将其解压到该文件夹里并修改名字为fluid。</p><h5 id="2-deploy配置"><a href="#2-deploy配置" class="headerlink" title="2.deploy配置"></a>2.deploy配置</h5><p>​这个代码块就在主题配置的下方。注意不要按照网上搜索的教程配置，因为很多教程都已经很老了，所以可能会出问题。按照下面的格式配置是没有问题的。（分支必须是main）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># <span class="hljs-title class_">Deployment</span><br>## <span class="hljs-title class_">Docs</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy</span>:<br>  <span class="hljs-attr">type</span>: git<br>  <span class="hljs-attr">repo</span>: git@github.<span class="hljs-property">com</span>:[博客名]/[仓库名].<span class="hljs-property">github</span>.<span class="hljs-property">io</span>.<span class="hljs-property">git</span><br>  <span class="hljs-attr">branch</span>: main<br></code></pre></td></tr></table></figure><p>注意：每个冒号后都有一个空格。</p><h5 id="3-记得保存修改"><a href="#3-记得保存修改" class="headerlink" title="3.记得保存修改"></a>3.记得保存修改</h5><p>​我所用的编译软件是vscode，这个软件直接退出是不会保存的。快捷键Ctrl+s可以保存修改，然后不用退出就可以继续hexo g+hexo s两步走试看网页效果啦。</p><h4 id="二、博客部署的问题"><a href="#二、博客部署的问题" class="headerlink" title="二、博客部署的问题"></a>二、博客部署的问题</h4><p>​我们知道要搭建博客，就要去Github官网创建一个博客，然后再建立一个仓库用于保存我们的网页。博客的名字可以随意取，但是仓库名，如果你和我一样取的是英文名，<strong>第一个字母一定要小写！！！！！</strong></p><p>​因为我们会发现，当我们想要进入自己的博客官网时，输入的网址格式如下：https:&#x2F;&#x2F;[仓库名].github.io&#x2F;，而每次进入网址时，仓库名的第一个字母就会自动从大写变成小写，因此访问时就会显示404。</p><p>​不知道是主题的问题还是什么，反正这个问题害我找bug找了快两个小时……</p><h5 id="1-配置安装缺失"><a href="#1-配置安装缺失" class="headerlink" title="1.配置安装缺失"></a>1.配置安装缺失</h5><p>有时候hexo d后报错是因为有些配置没有安装,用下面的指令安装好就可</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h5 id="2-在根目录下部署"><a href="#2-在根目录下部署" class="headerlink" title="2.在根目录下部署"></a>2.在根目录下部署</h5><p>有时候搭建博客在部署时会忘记退出到根目录，此时也会出错。</p><h4 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h4><p>1.在部署博客时最好hexo clean后再hexo g+hexo d。</p><p>2.博文的文件放置在source文件夹下的_posts文件夹内。（fluid主题配置后都会默认创建一个这样的文件，里面有一篇默认的文档）</p><p>3.博客主题文档的配置需要很多图片，千万不要把他们放在public文件夹下。因为public是每次部署博客生成的静态文件，每次hexo clean之后就会将其删除。但是博客文件是会保留下来的，所以不用担心。那么<strong>这些照片，最好放在source文件夹下的img文件夹内保存</strong>（若没有就新建一个这样的文件夹）。</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/12/hello-world/"/>
    <url>/2024/04/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
